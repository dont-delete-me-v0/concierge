import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import * as cron from 'node-cron';
import { Telegraf } from 'telegraf';
import { EventsApiService } from './events-api.service';
import { UserService } from './user.service';

interface DigestStats {
  sent: number;
  failed: number;
  noPreferences: number;
  noEvents: number;
}

@Injectable()
export class DigestService implements OnModuleInit {
  private readonly logger = new Logger(DigestService.name);
  private cronJob: cron.ScheduledTask | null = null;

  constructor(
    @InjectBot() private readonly bot: Telegraf,
    private readonly userService: UserService,
    private readonly eventsApi: EventsApiService
  ) {}

  onModuleInit() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    // –§–æ—Ä–º–∞—Ç: —Å–µ–∫—É–Ω–¥—ã –º–∏–Ω—É—Ç—ã —á–∞—Å—ã –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏
    // 0 8 * * * = –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 UTC (10:00 Kiev time)
    const cronExpression = process.env.DIGEST_CRON || '0 8 * * *';

    this.logger.log(`Starting digest scheduler with cron: ${cronExpression}`);

    this.cronJob = cron.schedule(
      cronExpression,
      async () => {
        this.logger.log('Running scheduled daily digest...');
        await this.sendDailyDigest();
      },
      {
        timezone: 'Europe/Kiev', // Kiev time zone
      }
    );

    this.logger.log('Digest scheduler started successfully');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
   */
  async sendDailyDigest(): Promise<DigestStats> {
    const stats: DigestStats = {
      sent: 0,
      failed: 0,
      noPreferences: 0,
      noEvents: 0,
    };

    this.logger.log('Starting daily digest...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
      const usersWithPrefs =
        await this.userService.getAllUsersWithPreferences();
      this.logger.log(`Found ${usersWithPrefs.length} users with preferences`);

      if (usersWithPrefs.length === 0) {
        this.logger.log('No users with preferences found');
        return stats;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Å–µ–≥–æ–¥–Ω—è + –Ω–µ–¥–µ–ª—è)
      const now = new Date();
      const today = now.toISOString().split('T')[0];
      const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)
        .toISOString()
        .split('T')[0];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–±–æ—Ä–∫—É –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      for (const { user, preferences } of usersWithPrefs) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
          if (
            !preferences.category_ids?.length &&
            !preferences.price_min &&
            !preferences.price_max
          ) {
            stats.noPreferences++;
            continue;
          }

          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
          const searchParams: any = {
            dateFrom: today,
            dateTo: nextWeek,
          };

          if (preferences.category_ids?.length) {
            // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            searchParams.categoryId = preferences.category_ids;
          }

          if (preferences.price_min) {
            searchParams.priceFrom = preferences.price_min;
          }

          if (preferences.price_max) {
            searchParams.priceTo = preferences.price_max;
          }

          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ + total –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
          const { items: events, total } = await this.eventsApi.search({
            ...searchParams,
            limit: 5,
            offset: 0,
          });

          if (!events.length) {
            stats.noEvents++;
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
            // await this.bot.telegram.sendMessage(
            //   user.telegram_id,
            //   'üéØ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.'
            // );
            continue;
          }

          this.logger.log(
            `Loaded ${events.length} events for display, total: ${total}`
          );

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const eventsList = events
            .map((event, idx) => {
              const title = event.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
              const price = event.price_from ? `${event.price_from} –≥—Ä–Ω` : '‚Äî';
              const dateFrom = event.date_time_from || event.date_time;
              const date = dateFrom
                ? new Date(dateFrom).toLocaleDateString('ru-RU', {
                    day: 'numeric',
                    month: 'long',
                  })
                : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

              return `${idx + 1}. <b>${this.escapeHtml(title)}</b>\n   üìÖ ${date} | üí∏ ${price}`;
            })
            .join('\n\n');

          const message = `üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>

üéØ <b>–ü–æ–¥–±–æ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—Å</b>

–ù–∞—à–ª–∏ ${total} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:

${eventsList}

${total > 5 ? `\n... –∏ –µ—â—ë ${total - 5} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n` : ''}
üîç –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "üéØ –ü–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è –º–µ–Ω—è" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!`;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.bot.telegram.sendMessage(user.telegram_id, message, {
            parse_mode: 'HTML',
          });

          stats.sent++;
          this.logger.log(
            `Sent to ${user.name || user.telegram_id} (${total} events, showing top 5)`
          );

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–∏–∑–±–µ–∂–∞—Ç—å rate limits)
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error: any) {
          stats.failed++;
          this.logger.error(
            `Failed to send to ${user.telegram_id}:`,
            error.message
          );
        }
      }

      this.logger.log('Digest completed:', stats);
    } catch (error) {
      this.logger.error('Error during digest:', error);
    }

    return stats;
  }

  /**
   * Escape HTML —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  onModuleDestroy() {
    if (this.cronJob) {
      this.cronJob.stop();
      this.logger.log('Digest scheduler stopped');
    }
  }
}
