#!/usr/bin/env node
import 'dotenv/config';
import { Telegraf } from 'telegraf';
import { DatabaseService } from './database.service.js';
import { EventsApiService } from './events-api.service.js';
import { formatEventCard } from './keyboards.js';
import { UserService } from './user.service.js';

interface DigestResult {
  sent: number;
  failed: number;
  noPreferences: number;
  noEvents: number;
}

async function sendDailyDigest(): Promise<DigestResult> {
  const result: DigestResult = {
    sent: 0,
    failed: 0,
    noPreferences: 0,
    noEvents: 0,
  };

  console.log('[DailyDigest] Starting daily digest...');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
  const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');
  const dbService = new DatabaseService();
  const userService = new UserService(dbService);
  const eventsApi = new EventsApiService();

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await dbService.onModuleInit();
    console.log('[DailyDigest] Database connected');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
    const usersWithPrefs = await userService.getAllUsersWithPreferences();
    console.log(
      `[DailyDigest] Found ${usersWithPrefs.length} users with preferences`
    );

    if (usersWithPrefs.length === 0) {
      console.log('[DailyDigest] No users with preferences found');
      return result;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Å–µ–≥–æ–¥–Ω—è + –Ω–µ–¥–µ–ª—è)
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split('T')[0];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–±–æ—Ä–∫—É –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for (const { user, preferences } of usersWithPrefs) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if (
          !preferences.category_ids?.length &&
          !preferences.price_min &&
          !preferences.price_max
        ) {
          result.noPreferences++;
          continue;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        const searchParams: any = {
          dateFrom: today,
          dateTo: nextWeek,
          limit: 10,
          offset: 0,
        };

        if (preferences.category_ids?.length) {
          searchParams.categoryId = preferences.category_ids[0];
        }

        if (preferences.price_min) {
          searchParams.priceFrom = preferences.price_min;
        }

        if (preferences.price_max) {
          searchParams.priceTo = preferences.price_max;
        }

        // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è
        const { items: events, total } = await eventsApi.search(searchParams);

        if (!events.length) {
          result.noEvents++;
          // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
          // await bot.telegram.sendMessage(
          //   user.telegram_id,
          //   'üéØ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.'
          // );
          continue;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const eventsList = events
          .slice(0, 5)
          .map((event, idx) => {
            const title = event.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            const price = event.price_from ? `${event.price_from} –≥—Ä–Ω` : '‚Äî';
            const dateFrom = event.date_time_from || event.date_time;
            const date = dateFrom
              ? new Date(dateFrom).toLocaleDateString('ru-RU', {
                  day: 'numeric',
                  month: 'long',
                })
              : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

            return `${idx + 1}. <b>${title}</b>\n   üìÖ ${date} | üí∏ ${price}`;
          })
          .join('\n\n');

        const message = `üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>

üéØ <b>–ü–æ–¥–±–æ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—Å</b>

–ù–∞—à–ª–∏ ${total} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:

${eventsList}

${total > 5 ? `\n... –∏ –µ—â—ë ${total - 5} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n` : ''}
üîç –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "üéØ –ü–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è –º–µ–Ω—è" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.telegram.sendMessage(user.telegram_id, message, {
          parse_mode: 'HTML',
        });

        result.sent++;
        console.log(
          `[DailyDigest] Sent to ${user.name || user.telegram_id} (${events.length} events)`
        );

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–∏–∑–±–µ–∂–∞—Ç—å rate limits)
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error: any) {
        result.failed++;
        console.error(
          `[DailyDigest] Failed to send to ${user.telegram_id}:`,
          error.message
        );
      }
    }

    console.log('[DailyDigest] Digest completed:', result);
  } catch (error) {
    console.error('[DailyDigest] Error:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await dbService.onModuleDestroy();
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: bot.stop() –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —á–µ—Ä–µ–∑ bot.launch()
    // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ bot.telegram.sendMessage(), –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
  }

  return result;
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
sendDailyDigest()
  .then(result => {
    console.log('[DailyDigest] Final result:', result);
    process.exit(0);
  })
  .catch(error => {
    console.error('[DailyDigest] Fatal error:', error);
    process.exit(1);
  });
