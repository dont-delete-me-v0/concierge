import { Ctx, Hears, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import type { Context, Scenes } from 'telegraf';
import { Markup } from 'telegraf';
import { EventsApiService } from './events-api.service.js';
import { formatEventCard, mainKeyboard, resolveEventUrl } from './keyboards.js';
import { UserService } from './user.service.js';

export interface SessionData {
  selectedCategories?: string[];
  events?: import('./events-api.service.js').EventItem[];
  currentIndex?: number;
  view?: 'card' | 'list';
  searchMode?: 'name' | 'price' | 'venue' | null;
  searchParams?: any; // Last search params for lazy loading
  totalEvents?: number; // Total count from server
  searchToken?: string; // isolates pagination callbacks per search
  profileEditMode?: 'phone' | 'email' | 'price' | 'categories' | null; // Current profile edit mode
  tempCategorySelection?: string[]; // Temporary category selection for preferences
  categoriesList?: Array<{ id: string; name: string }>; // Categories list for profile editing
}

export type BotContext = Context &
  Scenes.WizardContext & { session: SessionData };

@Update()
export class BotUpdate {
  constructor(
    private readonly eventsApi: EventsApiService,
    private readonly userService: UserService,
    @InjectBot() private readonly bot: any
  ) {}

  private generateSearchToken(): string {
    return Math.random().toString(36).slice(2, 10);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  private async getAllEventsWithPagination(searchParams: any): Promise<{
    events: import('./events-api.service.js').EventItem[];
    total: number;
  }> {
    const allEvents: import('./events-api.service.js').EventItem[] = [];
    let offset = 0;
    const limit = 50;
    let totalCount = 0;

    console.log('[BotUpdate] Starting pagination with params:', searchParams);

    while (true) {
      const { items, total } = await this.eventsApi.search({
        ...searchParams,
        limit,
        offset,
      });

      console.log(
        `[BotUpdate] Page fetched: offset=${offset}, items=${items.length}, total=${total}`
      );

      allEvents.push(...items);
      totalCount = total;
      offset += limit;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–±—ã—Ç–∏—è
      const hasMore = allEvents.length < total && items.length === limit;
      console.log(
        `[BotUpdate] hasMore=${hasMore} (collected=${allEvents.length}, total=${total}, lastPageSize=${items.length})`
      );

      if (!hasMore) break;

      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (offset > 1000) {
        console.warn('[BotUpdate] Reached maximum offset limit (1000)');
        break;
      }
    }

    console.log(
      `[BotUpdate] Pagination complete: collected ${allEvents.length} events`
    );
    return { events: allEvents, total: totalCount };
  }

  @Start()
  async onStart(@Ctx() ctx: BotContext) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = String(ctx.from?.id || '');
    const name = ctx.from?.first_name
      ? `${ctx.from.first_name}${ctx.from.last_name ? ' ' + ctx.from.last_name : ''}`
      : undefined;

    if (telegramId) {
      await this.userService.registerOrGetUser(telegramId, name);
    }

    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.',
      mainKeyboard()
    );
  }

  @Hears('üîç –ü–æ–∏—Å–∫')
  async onSearchMenu(@Ctx() ctx: BotContext) {
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:',
      Markup.keyboard([
        ['–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é', '–ü–æ –∞–¥—Ä–µ—Å—É'],
        ['–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ü–æ –¥–∞—Ç–µ'],
        ['–ü–æ —Ü–µ–Ω–µ'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'],
      ]).resize()
    );
  }

  @Hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
  async onBack(@Ctx() ctx: BotContext) {
    ctx.session.searchMode = null;
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard());
  }

  @Hears('–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
  async onSearchByName(@Ctx() ctx: BotContext) {
    ctx.session.searchMode = 'name';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:');
  }

  @Hears('–ü–æ –∞–¥—Ä–µ—Å—É')
  async onSearchByVenue(@Ctx() ctx: BotContext) {
    ctx.session.searchMode = 'venue';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏ (–∞–¥—Ä–µ—Å/venue name):');
  }

  @Hears('–ü–æ –¥–∞—Ç–µ')
  async onSearchByDate(@Ctx() ctx: BotContext) {
    const token = this.generateSearchToken();
    ctx.session.searchToken = token;
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:',
      Markup.inlineKeyboard([
        [Markup.button.callback('–°–µ–≥–æ–¥–Ω—è', `s:${token}:d:today`)],
        [Markup.button.callback('–ó–∞–≤—Ç—Ä–∞', `s:${token}:d:tomorrow`)],
        [Markup.button.callback('7 –¥–Ω–µ–π', `s:${token}:d:week`)],
        [Markup.button.callback('–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', `s:${token}:d:manual`)],
      ])
    );
  }

  @Hears('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
  async onSearchByCategory(@Ctx() ctx: BotContext) {
    const cats = await this.eventsApi.categories();
    if (!cats.length) {
      await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    const searchToken = this.generateSearchToken();
    ctx.session.searchToken = searchToken;
    // Chunk categories into rows of 2-3 buttons
    const rows: any[] = [];
    const tokens: string[] = [];
    for (const c of cats) {
      const token = this.eventsApi.tokenForEventId(c.id);
      tokens.push(token);
    }
    for (let i = 0; i < cats.length; i += 3) {
      rows.push(
        cats
          .slice(i, i + 3)
          .map((c, j) =>
            Markup.button.callback(
              c.name,
              `s:${searchToken}:c:${tokens[i + j]}`
            )
          )
      );
    }
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard(rows));
  }

  @Hears('–ü–æ —Ü–µ–Ω–µ')
  async onSearchByPrice(@Ctx() ctx: BotContext) {
    ctx.session.searchMode = 'price';
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n- 100-500 (–æ—Ç 100 –¥–æ 500 –≥—Ä–Ω)\n- 200 (–æ—Ç 200 –≥—Ä–Ω)\n- -300 (–¥–æ 300 –≥—Ä–Ω)'
    );
  }

  @Hears('‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
  async onFavorites(@Ctx() ctx: BotContext) {
    const telegramId = String(ctx.from?.id || '');
    if (!telegramId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    const favoriteIds = await this.userService.getFavorites(telegramId);
    if (!favoriteIds.length) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö
    const events: any[] = [];
    for (const id of favoriteIds) {
      const event = await this.eventsApi.getById(id);
      if (event) events.push(event);
    }

    if (!events.length) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
      return;
    }

    ctx.session.events = events;
    ctx.session.totalEvents = events.length;
    ctx.session.searchParams = { favoriteIds }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    ctx.session.currentIndex = 0;
    ctx.session.view = 'card';
    ctx.session.searchToken = this.generateSearchToken();
    const first = events[0];
    await ctx.replyWithHTML(
      formatEventCard(first),
      await this.buildCardKeyboard(
        first,
        0,
        events.length,
        ctx.session.searchToken,
        ctx
      )
    );
  }

  @Hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
  async onProfile(@Ctx() ctx: BotContext) {
    const telegramId = String(ctx.from?.id || '');
    if (!telegramId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    const user = await this.userService.getUserByTelegramId(telegramId);
    const preferences = await this.userService.getUserPreferences(telegramId);

    if (!user) {
      await ctx.reply(
        '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start'
      );
      return;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    const profileLines = [
      '<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>',
      '',
      `<b>–ò–º—è:</b> ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
      `<b>Email:</b> ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
      `<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> ${user.subscription_type}`,
      '',
      '<b>‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>',
    ];

    if (preferences) {
      if (preferences.category_ids && preferences.category_ids.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const cats = await this.eventsApi.categories();
        const selectedCatNames = preferences.category_ids
          .map(id => cats.find(c => c.id === id)?.name)
          .filter(Boolean);
        profileLines.push(
          `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> ${selectedCatNames.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}`
        );
      } else {
        profileLines.push('<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω—ã');
      }

      if (preferences.price_min !== null || preferences.price_max !== null) {
        const priceRange: string[] = [];
        if (preferences.price_min)
          priceRange.push(`–æ—Ç ${preferences.price_min} –≥—Ä–Ω`);
        if (preferences.price_max)
          priceRange.push(`–¥–æ ${preferences.price_max} –≥—Ä–Ω`);
        profileLines.push(
          `<b>–¶–µ–Ω—ã:</b> ${priceRange.join(' ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
        );
      } else {
        profileLines.push('<b>–¶–µ–Ω—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã');
      }
    } else {
      profileLines.push('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    const profileText = profileLines.join('\n');

    await ctx.replyWithHTML(
      profileText,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 'profile:edit:phone'),
          Markup.button.callback('üìß –ò–∑–º–µ–Ω–∏—Ç—å email', 'profile:edit:email'),
        ],
        [Markup.button.callback('‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'profile:prefs:view')],
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'profile:refresh')],
      ])
    );
  }

  @Hears('‚ö°Ô∏è –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?')
  async onToday(@Ctx() ctx: BotContext) {
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const searchParams = {
      dateFrom: today,
      dateTo: today,
      limit: 10,
      offset: 0,
    };
    const { items: events, total } = await this.eventsApi.search(searchParams);
    if (!events.length) {
      await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    ctx.session.events = events;
    ctx.session.totalEvents = total;
    ctx.session.searchParams = searchParams;
    ctx.session.currentIndex = 0;
    ctx.session.view = 'card';
    ctx.session.searchToken = this.generateSearchToken();
    const first = events[0];
    await ctx.replyWithHTML(
      formatEventCard(first),
      await this.buildCardKeyboard(
        first,
        0,
        total,
        ctx.session.searchToken,
        ctx
      )
    );
  }

  @Hears('üéØ –ü–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è –º–µ–Ω—è')
  async onRecommendations(@Ctx() ctx: BotContext) {
    const telegramId = String(ctx.from?.id || '');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const preferences = await this.userService.getUserPreferences(telegramId);

    if (
      !preferences ||
      (!preferences.category_ids?.length &&
        !preferences.price_min &&
        !preferences.price_max)
    ) {
      await ctx.reply(
        'üéØ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–∏!\n\n' +
          '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí ‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —É–∫–∞–∂–∏—Ç–µ:\n' +
          '‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n' +
          '‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω',
        mainKeyboard()
      );
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split('T')[0];

    const searchParams: any = {
      dateFrom: today,
      dateTo: nextWeek,
    };

    if (preferences.category_ids?.length) {
      // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      searchParams.categoryId = preferences.category_ids;
    }

    if (preferences.price_min) {
      searchParams.priceFrom = preferences.price_min;
    }

    if (preferences.price_max) {
      searchParams.priceTo = preferences.price_max;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const { events, total } =
      await this.getAllEventsWithPagination(searchParams);

    if (!events.length) {
      await ctx.reply(
        'üéØ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
        mainKeyboard()
      );
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–±–æ—Ä–∫—É
    ctx.session.events = events;
    ctx.session.totalEvents = total;
    ctx.session.searchParams = searchParams;
    ctx.session.currentIndex = 0;
    ctx.session.view = 'card';
    ctx.session.searchToken = this.generateSearchToken();

    const first = events[0];
    const message = `üéØ <b>–ü–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è –≤–∞—Å</b>\n\n–ù–∞–π–¥–µ–Ω–æ ${total} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º:\n\n${formatEventCard(first)}`;

    await ctx.replyWithHTML(
      message,
      await this.buildCardKeyboard(
        first,
        0,
        total,
        ctx.session.searchToken,
        ctx
      )
    );
  }

  @On('callback_query')
  async onCallback(@Ctx() ctx: BotContext) {
    const data = String((ctx.callbackQuery as any)?.data ?? '');
    // Legacy details token
    if (data.startsWith('d:')) {
      const token = data.slice(2);
      const id = this.eventsApi.resolveEventId(token);
      if (!id) {
        await ctx.answerCbQuery('–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞');
        return;
      }
      const event = await this.eventsApi.getById(id);
      if (!event) {
        await ctx.answerCbQuery('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      } else {
        await ctx.replyWithHTML(formatEventCard(event));
        await ctx.answerCbQuery();
      }
      return;
    }

    // Tokenized callbacks to avoid cross-search interference
    let action = data;
    let args: string[] = [];
    if (data.startsWith('t:')) {
      const parts = data.split(':');
      const token = parts[1];
      if (!token || token !== (ctx.session.searchToken ?? '')) {
        await ctx.answerCbQuery('–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞');
        return;
      }
      action = parts[2] ?? '';
      args = parts.slice(3);
    }

    if (action === 'noop') {
      await ctx.answerCbQuery();
      return;
    }

    // Profile actions
    if (data.startsWith('profile:')) {
      const parts = data.split(':');
      const profileAction = parts[1];
      const subAction = parts[2];

      if (profileAction === 'refresh') {
        // Refresh profile - call onProfile but edit message
        const telegramId = String(ctx.from?.id || '');
        const user = await this.userService.getUserByTelegramId(telegramId);
        const preferences =
          await this.userService.getUserPreferences(telegramId);

        if (!user) {
          await ctx.answerCbQuery('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        const profileLines = [
          '<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>',
          '',
          `<b>–ò–º—è:</b> ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
          `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
          `<b>Email:</b> ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
          `<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> ${user.subscription_type}`,
          '',
          '<b>‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>',
        ];

        if (preferences) {
          if (preferences.category_ids && preferences.category_ids.length > 0) {
            const cats = await this.eventsApi.categories();
            const selectedCatNames = preferences.category_ids
              .map(id => cats.find(c => c.id === id)?.name)
              .filter(Boolean);
            profileLines.push(
              `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> ${selectedCatNames.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}`
            );
          } else {
            profileLines.push('<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω—ã');
          }

          if (
            preferences.price_min !== null ||
            preferences.price_max !== null
          ) {
            const priceRange: string[] = [];
            if (preferences.price_min)
              priceRange.push(`–æ—Ç ${preferences.price_min} –≥—Ä–Ω`);
            if (preferences.price_max)
              priceRange.push(`–¥–æ ${preferences.price_max} –≥—Ä–Ω`);
            profileLines.push(
              `<b>–¶–µ–Ω—ã:</b> ${priceRange.join(' ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
            );
          } else {
            profileLines.push('<b>–¶–µ–Ω—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã');
          }
        } else {
          profileLines.push('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ "message is not modified"
        const currentTime = new Date().toLocaleTimeString('ru-RU');
        profileLines.push('', `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentTime}`);

        try {
          await ctx.editMessageText(profileLines.join('\n'), {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
                    callback_data: 'profile:edit:phone',
                  },
                  {
                    text: 'üìß –ò–∑–º–µ–Ω–∏—Ç—å email',
                    callback_data: 'profile:edit:email',
                  },
                ],
                [
                  {
                    text: '‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
                    callback_data: 'profile:prefs:view',
                  },
                ],
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'profile:refresh' }],
              ],
            },
          });
          await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error: any) {
          // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          if (error.description?.includes('message is not modified')) {
            await ctx.answerCbQuery('–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω');
          } else {
            console.error('[Profile Refresh] Error:', error);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
          }
        }
        return;
      }

      if (profileAction === 'prefs' && subAction === 'view') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        const telegramId = String(ctx.from?.id || '');
        const preferences =
          await this.userService.getUserPreferences(telegramId);

        const prefsLines = ['<b>‚öôÔ∏è –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>', ''];

        if (preferences) {
          // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
          if (preferences.category_ids && preferences.category_ids.length > 0) {
            const cats = await this.eventsApi.categories();
            const selectedCatNames = preferences.category_ids
              .map(id => cats.find(c => c.id === id)?.name)
              .filter(Boolean);
            prefsLines.push(
              `<b>üé≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n${selectedCatNames.join(', ')}`
            );
          } else {
            prefsLines.push('<b>üé≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω—ã');
          }

          prefsLines.push('');

          // –¶–µ–Ω—ã
          if (
            preferences.price_min !== null ||
            preferences.price_max !== null
          ) {
            const priceRange: string[] = [];
            if (preferences.price_min)
              priceRange.push(`–æ—Ç ${preferences.price_min} –≥—Ä–Ω`);
            if (preferences.price_max)
              priceRange.push(`–¥–æ ${preferences.price_max} –≥—Ä–Ω`);
            prefsLines.push(`<b>üí∞ –¶–µ–Ω—ã:</b>\n${priceRange.join(' ')}`);
          } else {
            prefsLines.push('<b>üí∞ –¶–µ–Ω—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã');
          }
        } else {
          prefsLines.push('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

        try {
          await ctx.editMessageText(prefsLines.join('\n'), {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                    callback_data: 'profile:edit:categories',
                  },
                ],
                [
                  {
                    text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã',
                    callback_data: 'profile:edit:price',
                  },
                ],
                [
                  {
                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é',
                    callback_data: 'profile:refresh',
                  },
                ],
              ],
            },
          });
          await ctx.answerCbQuery();
        } catch (error: any) {
          // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          if (error.description?.includes('message is not modified')) {
            await ctx.answerCbQuery('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
          } else {
            console.error('[Profile Prefs] Error:', error);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π');
          }
        }
        return;
      }

      if (profileAction === 'edit') {
        if (subAction === 'phone') {
          ctx.session.profileEditMode = 'phone';
          try {
            await ctx.editMessageText(
              '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380XXXXXXXXX:'
            );
            await ctx.answerCbQuery();
          } catch (error: any) {
            console.error('[Profile Edit Phone] Error:', error);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
          }
          return;
        }

        if (subAction === 'email') {
          ctx.session.profileEditMode = 'email';
          try {
            await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
            await ctx.answerCbQuery();
          } catch (error: any) {
            console.error('[Profile Edit Email] Error:', error);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ email');
          }
          return;
        }

        if (subAction === 'price') {
          ctx.session.profileEditMode = 'price';
          try {
            await ctx.editMessageText(
              '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
                '- 100-500 (–æ—Ç 100 –¥–æ 500 –≥—Ä–Ω)\n' +
                '- 200 (–æ—Ç 200 –≥—Ä–Ω)\n' +
                '- -300 (–¥–æ 300 –≥—Ä–Ω)\n' +
                '- 0 (—Å–±—Ä–æ—Å–∏—Ç—å)'
            );
            await ctx.answerCbQuery();
          } catch (error: any) {
            console.error('[Profile Edit Price] Error:', error);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ü–µ–Ω');
          }
          return;
        }

        if (subAction === 'categories') {
          const cats = await this.eventsApi.categories();
          if (!cats.length) {
            await ctx.answerCbQuery('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
          }

          const preferences = await this.userService.getUserPreferences(
            String(ctx.from?.id || '')
          );
          const selectedIds = preferences?.category_ids || [];
          ctx.session.tempCategorySelection = [...selectedIds];
          ctx.session.profileEditMode = 'categories';
          ctx.session.categoriesList = cats; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–µ—Å—Å–∏–∏

          const rows: any[] = [];
          for (let i = 0; i < cats.length; i += 2) {
            const row: { text: string; callback_data: string }[] = [];
            for (let j = 0; j < 2 && i + j < cats.length; j++) {
              const catIndex = i + j;
              const cat = cats[catIndex];
              const isSelected = selectedIds.includes(cat.id);
              row.push({
                text: `${isSelected ? '‚úÖ' : '‚¨ú'} ${cat.name}`,
                callback_data: `profile:toggle:cat:${catIndex}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ ID
              });
            }
            rows.push(row);
          }
          rows.push([
            { text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'profile:save:categories' },
          ]);
          rows.push([
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'profile:prefs:view' },
          ]);

          try {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
              reply_markup: { inline_keyboard: rows },
            });
            await ctx.answerCbQuery();
          } catch (error: any) {
            console.error('[Profile Edit Categories] Error:', error);
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
          }
          return;
        }
      }

      if (profileAction === 'toggle' && subAction === 'cat') {
        const catIndexStr = parts[3];
        const catIndex = parseInt(catIndexStr, 10);

        if (!ctx.session.categoriesList || isNaN(catIndex)) {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return;
        }

        const cat = ctx.session.categoriesList[catIndex];
        if (!cat) {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return;
        }

        if (!ctx.session.tempCategorySelection) {
          ctx.session.tempCategorySelection = [];
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –µ—ë ID
        const selectedIndex = ctx.session.tempCategorySelection.indexOf(cat.id);
        if (selectedIndex > -1) {
          ctx.session.tempCategorySelection.splice(selectedIndex, 1);
        } else {
          ctx.session.tempCategorySelection.push(cat.id);
        }

        // Update inline keyboard
        const cats = ctx.session.categoriesList;
        const selectedIds = ctx.session.tempCategorySelection;
        const rows: any[] = [];
        for (let i = 0; i < cats.length; i += 2) {
          const row: { text: string; callback_data: string }[] = [];
          for (let j = 0; j < 2 && i + j < cats.length; j++) {
            const idx = i + j;
            const category = cats[idx];
            const isSelected = selectedIds.includes(category.id);
            row.push({
              text: `${isSelected ? '‚úÖ' : '‚¨ú'} ${category.name}`,
              callback_data: `profile:toggle:cat:${idx}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
            });
          }
          rows.push(row);
        }
        rows.push([
          { text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'profile:save:categories' },
        ]);
        rows.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'profile:prefs:view' }]);

        await ctx.editMessageReplyMarkup({ inline_keyboard: rows });
        await ctx.answerCbQuery();
        return;
      }

      if (profileAction === 'save' && subAction === 'categories') {
        const telegramId = String(ctx.from?.id || '');
        const categoryIds = ctx.session.tempCategorySelection || [];

        const success = await this.userService.updateCategoryPreferences(
          telegramId,
          categoryIds
        );

        if (success) {
          ctx.session.profileEditMode = null;
          ctx.session.tempCategorySelection = undefined;
          ctx.session.categoriesList = undefined; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

          try {
            await ctx.editMessageText(
              '‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!'
            );
            await ctx.answerCbQuery();
          } catch (error: any) {
            console.error('[Category Save] Error:', error);
            await ctx.answerCbQuery('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
          setTimeout(async () => {
            const preferences =
              await this.userService.getUserPreferences(telegramId);

            const prefsLines = ['<b>‚öôÔ∏è –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</b>', ''];

            if (preferences) {
              // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
              if (
                preferences.category_ids &&
                preferences.category_ids.length > 0
              ) {
                const cats = await this.eventsApi.categories();
                const selectedCatNames = preferences.category_ids
                  .map(id => cats.find(c => c.id === id)?.name)
                  .filter(Boolean);
                prefsLines.push(
                  `<b>üé≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n${selectedCatNames.join(', ')}`
                );
              } else {
                prefsLines.push('<b>üé≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –ù–µ –≤—ã–±—Ä–∞–Ω—ã');
              }

              prefsLines.push('');

              // –¶–µ–Ω—ã
              if (
                preferences.price_min !== null ||
                preferences.price_max !== null
              ) {
                const priceRange: string[] = [];
                if (preferences.price_min)
                  priceRange.push(`–æ—Ç ${preferences.price_min} –≥—Ä–Ω`);
                if (preferences.price_max)
                  priceRange.push(`–¥–æ ${preferences.price_max} –≥—Ä–Ω`);
                prefsLines.push(`<b>üí∞ –¶–µ–Ω—ã:</b>\n${priceRange.join(' ')}`);
              } else {
                prefsLines.push('<b>üí∞ –¶–µ–Ω—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã');
              }
            } else {
              prefsLines.push('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            }

            await ctx.replyWithHTML(
              prefsLines.join('\n'),
              Markup.inlineKeyboard([
                [
                  {
                    text: 'üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                    callback_data: 'profile:edit:categories',
                  },
                ],
                [
                  {
                    text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã',
                    callback_data: 'profile:edit:price',
                  },
                ],
                [
                  {
                    text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é',
                    callback_data: 'profile:refresh',
                  },
                ],
              ])
            );
          }, 1000);
        } else {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
        }
        return;
      }
    }

    // Favorites: add/remove
    if (action === 'fav' && (args[0] === 'add' || args[0] === 'remove')) {
      const telegramId = String(ctx.from?.id || '');
      const eventToken = args[1];

      if (!telegramId || !eventToken) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
      }

      // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–∫–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è
      const eventId = this.eventsApi.resolveEventId(eventToken);
      if (!eventId) {
        await ctx.answerCbQuery('–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      if (args[0] === 'add') {
        const success = await this.userService.addFavorite(telegramId, eventId);
        if (success) {
          await ctx.answerCbQuery('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
          const events = ctx.session.events ?? [];
          const idx = ctx.session.currentIndex ?? 0;
          const total = ctx.session.totalEvents ?? events.length;
          const e = events[idx];
          if (e) {
            await ctx.editMessageReplyMarkup(
              (
                await this.buildCardKeyboard(
                  e,
                  idx,
                  total,
                  ctx.session.searchToken ?? '',
                  ctx
                )
              ).reply_markup
            );
          }
        } else {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏');
        }
      } else {
        const success = await this.userService.removeFavorite(
          telegramId,
          eventId
        );
        if (success) {
          await ctx.answerCbQuery('‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
          const events = ctx.session.events ?? [];
          const idx = ctx.session.currentIndex ?? 0;
          const total = ctx.session.totalEvents ?? events.length;
          const e = events[idx];
          if (e) {
            await ctx.editMessageReplyMarkup(
              (
                await this.buildCardKeyboard(
                  e,
                  idx,
                  total,
                  ctx.session.searchToken ?? '',
                  ctx
                )
              ).reply_markup
            );
          }
        } else {
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
      }
      return;
    }

    // Navigation: prev/next with lazy loading
    if (action === 'nav' && (args[0] === 'p' || args[0] === 'n')) {
      const events = ctx.session.events ?? [];
      const total = ctx.session.totalEvents ?? events.length;
      const current = ctx.session.currentIndex ?? 0;
      const nextIndex = args[0] === 'p' ? current - 1 : current + 1;

      if (nextIndex < 0 || nextIndex >= total) {
        await ctx.answerCbQuery('–≠—Ç–æ –ø–µ—Ä–≤–∞—è/–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞');
        return;
      }

      // Check if we need to load more events
      if (nextIndex >= events.length || !events[nextIndex]) {
        const searchParams = ctx.session.searchParams ?? {};
        const offset = Math.floor(nextIndex / 10) * 10;
        const { items: newEvents } = await this.eventsApi.search({
          ...searchParams,
          limit: 10,
          offset,
        });
        // Merge new events into the existing array
        if (!ctx.session.events) ctx.session.events = [];
        for (let i = 0; i < newEvents.length; i++) {
          ctx.session.events[offset + i] = newEvents[i];
        }
      }

      ctx.session.currentIndex = nextIndex;
      ctx.session.view = 'card';
      const e = (ctx.session.events ?? [])[nextIndex];
      if (!e) {
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
        return;
      }
      await ctx.editMessageText(formatEventCard(e), {
        parse_mode: 'HTML',
        ...(await this.buildCardKeyboard(
          e,
          nextIndex,
          total,
          ctx.session.searchToken ?? '',
          ctx
        )),
      });
      await ctx.answerCbQuery();
      return;
    }

    // Switch view: list or card
    if (action === 'view' && args[0] === 'list') {
      ctx.session.view = 'list';
      await this.renderList(ctx, 0);
      await ctx.answerCbQuery();
      return;
    }
    if (action === 'view' && args[0] === 'card') {
      const events = ctx.session.events ?? [];
      const total = ctx.session.totalEvents ?? events.length;
      const idx = ctx.session.currentIndex ?? 0;
      const e = events[idx];
      if (e) {
        ctx.session.view = 'card';
        await ctx.editMessageText(formatEventCard(e), {
          parse_mode: 'HTML',
          ...(await this.buildCardKeyboard(
            e,
            idx,
            total,
            ctx.session.searchToken ?? '',
            ctx
          )),
        });
      }
      await ctx.answerCbQuery();
      return;
    }

    // List navigation go to item index
    if (action === 'go') {
      const idx = Number(args[0]);
      const events = ctx.session.events ?? [];
      const total = ctx.session.totalEvents ?? events.length;
      if (Number.isNaN(idx) || idx < 0 || idx >= total) {
        await ctx.answerCbQuery('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // Load event if not yet loaded
      if (!events[idx]) {
        const offset = Math.floor(idx / 10) * 10;
        const searchParams = ctx.session.searchParams ?? {};
        const { items: newEvents } = await this.eventsApi.search({
          ...searchParams,
          limit: 10,
          offset,
        });
        // Merge loaded events
        if (!ctx.session.events) ctx.session.events = [];
        for (let i = 0; i < newEvents.length; i++) {
          ctx.session.events[offset + i] = newEvents[i];
        }
      }

      ctx.session.currentIndex = idx;
      ctx.session.view = 'card';
      const e = (ctx.session.events ?? [])[idx];
      if (!e) {
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
        return;
      }
      await ctx.editMessageText(formatEventCard(e), {
        parse_mode: 'HTML',
        ...(await this.buildCardKeyboard(
          e,
          idx,
          total,
          ctx.session.searchToken ?? '',
          ctx
        )),
      });
      await ctx.answerCbQuery();
      return;
    }

    // List page navigation
    if (action === 'list') {
      const next = Number(args[1] ?? args[0]);
      if (!Number.isFinite(next)) {
        await ctx.answerCbQuery('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return;
      }
      await this.renderList(ctx, next);
      await ctx.answerCbQuery();
      return;
    }

    // Search by date actions with token validation
    if (data.startsWith('s:')) {
      const parts = data.split(':');
      if (parts.length >= 3 && parts[2] === 'd') {
        const token = parts[1];
        if (token !== (ctx.session.searchToken ?? '')) {
          await ctx.answerCbQuery('–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞');
          return;
        }
        const dateKey = parts[3] as 'today' | 'tomorrow' | 'week' | 'manual';
        if (dateKey === 'manual') {
          await ctx.editMessageText(
            '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n- 2025-10-15 (–¥–∞—Ç–∞)\n- 2025-10-15T14:30 (–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è)\n- 2025-10-15 ‚Äî 2025-10-20 (–¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç)\n- 2025-10-15T10:00 ‚Äî 2025-10-15T18:00 (–¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏)',
            { parse_mode: undefined }
          );
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∏–∂–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
          await ctx.answerCbQuery();
          return;
        }
        const now = new Date();
        let dateFrom: string;
        let dateTo: string;
        if (dateKey === 'today') {
          dateFrom = now.toISOString().split('T')[0];
          dateTo = dateFrom;
        } else if (dateKey === 'tomorrow') {
          const t = new Date(now);
          t.setDate(now.getDate() + 1);
          dateFrom = t.toISOString().split('T')[0];
          dateTo = dateFrom;
        } else if (dateKey === 'week') {
          dateFrom = now.toISOString().split('T')[0];
          const week = new Date(now);
          week.setDate(now.getDate() + 7);
          dateTo = week.toISOString().split('T')[0];
        } else {
          await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä');
          return;
        }
        const searchParams = { dateFrom, dateTo, limit: 10, offset: 0 };
        const { items: events, total } =
          await this.eventsApi.search(searchParams);
        if (!events.length) {
          await ctx.editMessageText('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
          await ctx.answerCbQuery();
          return;
        }
        ctx.session.events = events;
        ctx.session.totalEvents = total;
        ctx.session.searchParams = searchParams;
        ctx.session.currentIndex = 0;
        ctx.session.view = 'card';
        ctx.session.searchToken = this.generateSearchToken();
        const first = events[0];
        await ctx.editMessageText(formatEventCard(first), {
          parse_mode: 'HTML',
          ...(await this.buildCardKeyboard(
            first,
            0,
            total,
            ctx.session.searchToken,
            ctx
          )),
        });
        await ctx.answerCbQuery();
        return;
      }

      if (parts.length >= 3 && parts[2] === 'c') {
        const token = parts[1];
        if (token !== (ctx.session.searchToken ?? '')) {
          await ctx.answerCbQuery('–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞');
          return;
        }
        const catToken = parts[3];
        const id = this.eventsApi.resolveEventId(catToken);
        if (!id) {
          await ctx.answerCbQuery('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
          return;
        }
        const searchParams = { categoryId: id, limit: 10, offset: 0 };
        const { items: events, total } =
          await this.eventsApi.search(searchParams);
        if (!events.length) {
          await ctx.editMessageText('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          await ctx.answerCbQuery();
          return;
        }
        ctx.session.events = events;
        ctx.session.totalEvents = total;
        ctx.session.searchParams = searchParams;
        ctx.session.currentIndex = 0;
        ctx.session.view = 'card';
        ctx.session.searchToken = this.generateSearchToken();
        const first = events[0];
        await ctx.editMessageText(formatEventCard(first), {
          parse_mode: 'HTML',
          ...(await this.buildCardKeyboard(
            first,
            0,
            total,
            ctx.session.searchToken,
            ctx
          )),
        });
        await ctx.answerCbQuery();
        return;
      }
    }
  }

  @On('text')
  async onText(@Ctx() ctx: BotContext) {
    const mode = ctx.session.searchMode ?? null;
    const profileMode = ctx.session.profileEditMode ?? null;
    const text = String((ctx.message as any)?.text ?? '').trim();
    if (!text || text.startsWith('/')) return;

    // Profile edit modes
    if (profileMode === 'phone') {
      const telegramId = String(ctx.from?.id || '');
      const phoneRegex = /^\+?\d{10,15}$/;

      if (!phoneRegex.test(text.replace(/[\s-]/g, ''))) {
        await ctx.reply(
          '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +380XXXXXXXXX'
        );
        return;
      }

      const success = await this.userService.updateUserProfile(telegramId, {
        phone: text,
      });
      if (success) {
        ctx.session.profileEditMode = null;
        await ctx.reply('‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', mainKeyboard());
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', mainKeyboard());
      }
      return;
    }

    if (profileMode === 'email') {
      const telegramId = String(ctx.from?.id || '');
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      if (!emailRegex.test(text)) {
        await ctx.reply(
          '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∞–¥—Ä–µ—Å.'
        );
        return;
      }

      const success = await this.userService.updateUserProfile(telegramId, {
        email: text,
      });
      if (success) {
        ctx.session.profileEditMode = null;
        await ctx.reply('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', mainKeyboard());
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email', mainKeyboard());
      }
      return;
    }

    if (profileMode === 'price') {
      const telegramId = String(ctx.from?.id || '');

      // –°–±—Ä–æ—Å —Ü–µ–Ω
      if (text === '0') {
        const success = await this.userService.updatePricePreferences(
          telegramId,
          null,
          null
        );
        if (success) {
          ctx.session.profileEditMode = null;
          await ctx.reply('‚úÖ –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã!', mainKeyboard());
        } else {
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ', mainKeyboard());
        }
        return;
      }

      const priceMatch = text.match(/^(-?\d+)(?:-(-?\d+))?$/);
      if (!priceMatch) {
        await ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n- 100-500\n- 200\n- -300\n- 0 (—Å–±—Ä–æ—Å)'
        );
        return;
      }

      const [, fromStr, toStr] = priceMatch;
      let priceMin: number | undefined;
      let priceMax: number | undefined;

      if (fromStr.startsWith('-')) {
        // Only upper bound: -300 means up to 300
        priceMax = Math.abs(Number(fromStr));
      } else if (toStr) {
        // Range: 100-500
        priceMin = Number(fromStr);
        priceMax = Number(toStr);
      } else {
        // Only lower bound: 200 means from 200
        priceMin = Number(fromStr);
      }

      const success = await this.userService.updatePricePreferences(
        telegramId,
        priceMin,
        priceMax
      );
      if (success) {
        ctx.session.profileEditMode = null;
        const rangeStr: string[] = [];
        if (priceMin) rangeStr.push(`–æ—Ç ${priceMin} –≥—Ä–Ω`);
        if (priceMax) rangeStr.push(`–¥–æ ${priceMax} –≥—Ä–Ω`);
        await ctx.reply(
          `‚úÖ –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${rangeStr.join(' ')}`,
          mainKeyboard()
        );
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', mainKeyboard());
      }
      return;
    }
    // Manual date input (supports both date and datetime)
    const manualDateMatch = text.match(
      /^(\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}(?::\d{2})?)?)(?:\s*[‚Äì‚Äî-]\s*(\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}(?::\d{2})?)?))?$/
    );
    if (manualDateMatch) {
      const [, from, to] = manualDateMatch;
      console.log('[BotUpdate] Manual date input - from:', from, 'to:', to);

      // Convert local time to UTC for API
      const convertToUTC = (localTime: string) => {
        const date = new Date(localTime);
        return date.toISOString();
      };

      const searchParams: any = {
        dateFrom: convertToUTC(from),
        limit: 10,
        offset: 0,
      };
      if (to) searchParams.dateTo = convertToUTC(to);
      else searchParams.dateTo = convertToUTC(from);

      console.log('[BotUpdate] Search params (UTC):', searchParams);
      const { items: events, total } =
        await this.eventsApi.search(searchParams);
      if (!events.length) {
        await ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã/–¥–∏–∞–ø–∞–∑–æ–Ω–∞.');
        return;
      }
      ctx.session.events = events;
      ctx.session.totalEvents = total;
      ctx.session.searchParams = searchParams;
      ctx.session.currentIndex = 0;
      ctx.session.view = 'card';
      ctx.session.searchToken = this.generateSearchToken();
      const first = events[0];
      await ctx.replyWithHTML(
        formatEventCard(first),
        await this.buildCardKeyboard(
          first,
          0,
          total,
          ctx.session.searchToken,
          ctx
        )
      );
      return;
    }

    // Price range input
    if (mode === 'price') {
      const priceMatch = text.match(/^(-?\d+)(?:-(-?\d+))?$/);
      if (!priceMatch) {
        await ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 100-500, 200, –∏–ª–∏ -300'
        );
        return;
      }
      const [, fromStr, toStr] = priceMatch;
      const searchParams: any = { limit: 10, offset: 0 };
      if (fromStr.startsWith('-')) {
        // Only upper bound: -300 means up to 300
        searchParams.priceTo = Math.abs(Number(fromStr));
      } else if (toStr) {
        // Range: 100-500
        searchParams.priceFrom = Number(fromStr);
        searchParams.priceTo = Number(toStr);
      } else {
        // Only lower bound: 200 means from 200
        searchParams.priceFrom = Number(fromStr);
      }
      const { items: events, total } =
        await this.eventsApi.search(searchParams);
      if (!events.length) {
        await ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.');
        return;
      }
      ctx.session.events = events;
      ctx.session.totalEvents = total;
      ctx.session.searchParams = searchParams;
      ctx.session.currentIndex = 0;
      ctx.session.view = 'card';
      ctx.session.searchToken = this.generateSearchToken();
      const first = events[0];
      await ctx.replyWithHTML(
        formatEventCard(first),
        await this.buildCardKeyboard(
          first,
          0,
          total,
          ctx.session.searchToken,
          ctx
        )
      );
      return;
    }

    if (mode !== 'name' && mode !== 'venue') return;
    const searchParams =
      mode === 'name'
        ? { q: text, limit: 10, offset: 0 }
        : { venueName: text, limit: 10, offset: 0 };
    const { items: events, total } = await this.eventsApi.search(searchParams);
    if (!events.length) {
      await ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.');
      return;
    }

    ctx.session.events = events;
    ctx.session.totalEvents = total;
    ctx.session.searchParams = searchParams;
    ctx.session.currentIndex = 0;
    ctx.session.view = 'card';
    ctx.session.searchToken = this.generateSearchToken();
    const first = events[0];
    await ctx.replyWithHTML(
      formatEventCard(first),
      await this.buildCardKeyboard(
        first,
        0,
        total,
        ctx.session.searchToken,
        ctx
      )
    );
  }

  private async buildCardKeyboard(
    e: import('./events-api.service.js').EventItem,
    index: number,
    total: number,
    token?: string,
    ctx?: BotContext
  ) {
    const t = token ? `t:${token}:` : '';
    const navRow = [
      Markup.button.callback('‚óÄÔ∏è', `${t}nav:p`),
      Markup.button.callback(`${index + 1}/${total}`, `${t}noop`),
      Markup.button.callback('‚ñ∂Ô∏è', `${t}nav:n`),
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ —Å–æ–±—ã—Ç–∏–µ
    let isFav = false;
    if (ctx?.from?.id) {
      const telegramId = String(ctx.from.id);
      isFav = await this.userService.isFavorite(telegramId, e.id);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ ID (callback_data –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 64 –±–∞–π—Ç–∞–º–∏)
    const eventToken = this.eventsApi.tokenForEventId(e.id);
    const favButton = isFav
      ? Markup.button.callback(
          'üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
          `${t}fav:remove:${eventToken}`
        )
      : Markup.button.callback(
          '‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
          `${t}fav:add:${eventToken}`
        );

    const listRow = [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫', `${t}view:list`)];
    const abs = resolveEventUrl(e.source_url);
    const openRow = abs ? [Markup.button.url('üîó –û—Ç–∫—Ä—ã—Ç—å', abs)] : [];
    return Markup.inlineKeyboard([
      navRow,
      [favButton],
      listRow,
      ...(openRow.length ? [openRow] : []),
    ]);
  }

  private async renderList(ctx: BotContext, page: number) {
    const total = ctx.session.totalEvents ?? ctx.session.events?.length ?? 0;
    const pageSize = 5;
    const totalPages = Math.max(1, Math.ceil(total / pageSize));
    const bounded = Math.max(0, Math.min(totalPages - 1, page));
    const start = bounded * pageSize;
    const end = Math.min(start + pageSize, total);

    // Load events for this page if not yet loaded
    if (!ctx.session.events) ctx.session.events = [];
    for (let i = start; i < end; i++) {
      if (!ctx.session.events[i]) {
        // Need to load this event
        const offset = Math.floor(i / 10) * 10;
        const searchParams = ctx.session.searchParams ?? {};
        const { items: newEvents } = await this.eventsApi.search({
          ...searchParams,
          limit: 10,
          offset,
        });
        // Merge loaded events
        for (let j = 0; j < newEvents.length; j++) {
          ctx.session.events[offset + j] = newEvents[j];
        }
      }
    }

    // Get events for current page
    const slice: any[] = [];
    for (let i = start; i < end; i++) {
      const e = ctx.session.events[i];
      if (e) slice.push(e);
    }

    const lines = slice.map((e, i) => {
      const num = start + i + 1;
      const date = e.date_time_from ?? e.date_time ?? e.date_time_to;
      const dateStr = date
        ? new Date(date).toLocaleString('ru-RU', {
            dateStyle: 'short',
            timeStyle: 'short',
          })
        : '';
      return `${num}. ${e.title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}${dateStr ? ` ‚Äî ${dateStr}` : ''}`;
    });
    const header = `–ù–∞–π–¥–µ–Ω–æ: ${total}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${bounded + 1}/${totalPages}`;
    const text = [header, '', ...lines].join('\n');

    // Build number buttons for this page
    const t = ctx.session.searchToken ? `t:${ctx.session.searchToken}:` : '';
    const numberButtons = slice.map((_, i) =>
      Markup.button.callback(String(start + i + 1), `${t}go:${start + i}`)
    );
    const numbersRows: any[] = [];
    // chunk by 5 per row
    for (let i = 0; i < numberButtons.length; i += 5) {
      numbersRows.push(numberButtons.slice(i, i + 5));
    }
    const navRow = [
      Markup.button.callback('‚óÄÔ∏è', `${t}list:${bounded - 1}`),
      Markup.button.callback(`${bounded + 1}/${totalPages}`, `${t}noop`),
      Markup.button.callback('‚ñ∂Ô∏è', `${t}list:${bounded + 1}`),
    ];
    const toCardRow = [
      Markup.button.callback('üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ', `${t}view:card`),
    ];

    await ctx.editMessageText(text, {
      parse_mode: undefined,
      reply_markup: {
        inline_keyboard: [...numbersRows, navRow, toCardRow],
      },
    });
  }
}
