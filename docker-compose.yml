services:
  db:
    image: postgres:latest
    container_name: concierge-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-concierge}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/init:/docker-entrypoint-initdb.d:ro
      - ./packages/database/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d postgres -h 127.0.0.1 -p 5432 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 30s

  db-backup:
    image: postgres:latest
    container_name: concierge-postgres-backup
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-concierge}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./packages/database/backups:/backups
      - ./packages/database/backup-cron.sh:/backup-cron.sh:ro
    command: /bin/bash /backup-cron.sh
    networks:
      - default

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: concierge-pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: "80"
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - default
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: concierge-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: concierge-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-concierge}
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE:-events}
      RABBITMQ_PREFETCH: ${RABBITMQ_PREFETCH:-100}
      CONSUMER_BATCH_SIZE: ${CONSUMER_BATCH_SIZE:-100}
      CONSUMER_FLUSH_MS: ${CONSUMER_FLUSH_MS:-200}
      TELEGRAM_TRACKER_TOKEN: ${TELEGRAM_TRACKER_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
    ports:
      - "${API_PORT:-3000}:3000"
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  bot:
    build:
      context: .
      dockerfile: apps/bot/Dockerfile
    container_name: concierge-bot
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-concierge}
      REDIS_URL: redis://redis:6379
      API_BASE_URL: http://api:3000
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      DIGEST_CRON: ${DIGEST_CRON:-0 8 * * *}
    ports:
      - "${BOT_PORT:-3001}:3001"
    networks:
      - default

  web-crawler:
    build:
      context: .
      dockerfile: apps/web-crawler/Dockerfile
    container_name: concierge-web-crawler
    restart: unless-stopped
    privileged: true 
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE:-events}
      PUBLISHER_BATCH_SIZE: ${PUBLISHER_BATCH_SIZE:-50}
      PUBLISHER_BATCH_INTERVAL_MS: ${PUBLISHER_BATCH_INTERVAL_MS:-200}
      PUBLISHER_MAX_RETRIES: ${PUBLISHER_MAX_RETRIES:-3}
      PUBLISHER_RECONNECT_DELAY_MS: ${PUBLISHER_RECONNECT_DELAY_MS:-1000}
      STATE_PREFIX: ${STATE_PREFIX:-concert.ua}
      CRAWLER_SAVE_OUTPUT: ${CRAWLER_SAVE_OUTPUT:-false}
      TELEGRAM_TRACKING: ${TELEGRAM_TRACKING:-false}
      TELEGRAM_TRACKER_TOKEN: ${TELEGRAM_TRACKER_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      API_BASE_URL: http://api:3000
      SOURCE_BASE_URL: ${SOURCE_BASE_URL:-https://concert.ua}
    volumes:
      - crawler_logs:/var/log/crawler
    networks:
      - default
    healthcheck:
      test: ["CMD", "sh", "-c", "pgrep crond || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  pgadmin_data:
  rabbitmq_data:
  crawler_logs:

networks:
  default:
    name: concierge_net

