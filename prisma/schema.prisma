// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core taxonomy: categories
model Category {
  id       String     @id
  name     String
  icon     String?
  parentId String?    @map("parent_id")

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  events   Event[]

  @@map("categories")
}

// Venues directory
model Venue {
  id      String  @id
  name    String
  address String?
  lat     Float?
  lng     Float?
  phone   String?
  website String?

  events  Event[]

  @@map("venues")
}

// Events table (normalized)
model Event {
  id           String    @id
  title        String?
  description  String?
  categoryId   String?   @map("category_id")
  venueId      String?   @map("venue_id")
  dateTime     DateTime? @map("date_time") @db.Timestamptz
  dateTimeFrom DateTime? @map("date_time_from") @db.Timestamptz
  dateTimeTo   DateTime? @map("date_time_to") @db.Timestamptz
  priceFrom    Decimal?  @map("price_from") @db.Decimal(12, 2)
  sourceUrl    String?   @map("source_url")

  category  Category?  @relation(fields: [categoryId], references: [id])
  venue     Venue?     @relation(fields: [venueId], references: [id])
  favorites Favorite[]

  @@index([categoryId], name: "idx_events_category")
  @@index([venueId], name: "idx_events_venue")
  @@index([dateTime], name: "idx_events_date_time")
  @@index([dateTimeFrom], name: "idx_events_date_time_from")
  @@index([dateTimeTo], name: "idx_events_date_time_to")
  @@map("events")
}

// Users table for bot registration
model User {
  id               Int      @id @default(autoincrement())
  telegramId       BigInt   @unique @map("telegram_id")
  name             String?
  phone            String?
  email            String?
  subscriptionType String   @default("free") @map("subscription_type")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz

  favorites   Favorite[]
  preferences UserPreference?

  @@index([telegramId], name: "idx_users_telegram_id")
  @@map("users")
}

// Favorites table for user's saved events
model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId], name: "idx_favorites_user_id")
  @@index([eventId], name: "idx_favorites_event_id")
  @@map("favorites")
}

// User preferences table for personalization
model UserPreference {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique @map("user_id")
  categoryIds String[]  @map("category_ids")
  districtIds String[]  @map("district_ids")
  priceMin    Decimal?  @map("price_min") @db.Decimal(12, 2)
  priceMax    Decimal?  @map("price_max") @db.Decimal(12, 2)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_user_preferences_user_id")
  @@map("user_preferences")
}
